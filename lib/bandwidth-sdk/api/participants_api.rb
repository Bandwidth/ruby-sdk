=begin
#Bandwidth

#Bandwidth's Communication APIs

The version of the OpenAPI document: 1.0.0
Contact: letstalk@bandwidth.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Bandwidth
  class ParticipantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Participant
    # Create a new participant under this account. Participants are idempotent, so relevant parameters must be set in this function if desired.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateParticipantRequest] :create_participant_request Create participant request body.
    # @return [CreateParticipantResponse]
    def create_participant(account_id, opts = {})
      data, _status_code, _headers = create_participant_with_http_info(account_id, opts)
      data
    end

    # Create Participant
    # Create a new participant under this account. Participants are idempotent, so relevant parameters must be set in this function if desired.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateParticipantRequest] :create_participant_request Create participant request body.
    # @return [Array<(CreateParticipantResponse, Integer, Hash)>] CreateParticipantResponse data, response status code and response headers
    def create_participant_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParticipantsApi.create_participant ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ParticipantsApi.create_participant"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/participants'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_participant_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateParticipantResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ParticipantsApi.create_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParticipantsApi#create_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Participant
    # Delete participant by ID.
    # @param account_id [String] Account ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_participant(account_id, participant_id, opts = {})
      delete_participant_with_http_info(account_id, participant_id, opts)
      nil
    end

    # Delete Participant
    # Delete participant by ID.
    # @param account_id [String] Account ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_participant_with_http_info(account_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParticipantsApi.delete_participant ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ParticipantsApi.delete_participant"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling ParticipantsApi.delete_participant"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/participants/{participantId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ParticipantsApi.delete_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParticipantsApi#delete_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Participant
    # Get participant by ID.
    # @param account_id [String] Account ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Participant]
    def get_participant(account_id, participant_id, opts = {})
      data, _status_code, _headers = get_participant_with_http_info(account_id, participant_id, opts)
      data
    end

    # Get Participant
    # Get participant by ID.
    # @param account_id [String] Account ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Participant, Integer, Hash)>] Participant data, response status code and response headers
    def get_participant_with_http_info(account_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParticipantsApi.get_participant ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ParticipantsApi.get_participant"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling ParticipantsApi.get_participant"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/participants/{participantId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Participant'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ParticipantsApi.get_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParticipantsApi#get_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
