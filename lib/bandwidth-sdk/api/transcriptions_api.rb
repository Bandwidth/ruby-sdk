=begin
#Bandwidth

#Bandwidth's Communication APIs

The version of the OpenAPI document: 1.0.0
Contact: letstalk@bandwidth.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Bandwidth
  class TranscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a specific transcription
    # Delete the specified transcription that was created on this call via [startTranscription](/docs/voice/bxml/startTranscription).  Note: After the deletion is requested and a `200` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param transcription_id [String] Programmable Voice API Transcription ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_real_time_transcription(account_id, call_id, transcription_id, opts = {})
      delete_real_time_transcription_with_http_info(account_id, call_id, transcription_id, opts)
      nil
    end

    # Delete a specific transcription
    # Delete the specified transcription that was created on this call via [startTranscription](/docs/voice/bxml/startTranscription).  Note: After the deletion is requested and a &#x60;200&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param transcription_id [String] Programmable Voice API Transcription ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_real_time_transcription_with_http_info(account_id, call_id, transcription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptionsApi.delete_real_time_transcription ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TranscriptionsApi.delete_real_time_transcription"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling TranscriptionsApi.delete_real_time_transcription"
      end
      # verify the required parameter 'transcription_id' is set
      if @api_client.config.client_side_validation && transcription_id.nil?
        fail ArgumentError, "Missing the required parameter 'transcription_id' when calling TranscriptionsApi.delete_real_time_transcription"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/calls/{callId}/transcriptions/{transcriptionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'transcriptionId' + '}', CGI.escape(transcription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"TranscriptionsApi.delete_real_time_transcription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionsApi#delete_real_time_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific transcription
    # Retrieve the specified transcription that was created on this call via [startTranscription](/docs/voice/bxml/startTranscription).
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param transcription_id [String] Programmable Voice API Transcription ID.
    # @param [Hash] opts the optional parameters
    # @return [CallTranscriptionResponse]
    def get_real_time_transcription(account_id, call_id, transcription_id, opts = {})
      data, _status_code, _headers = get_real_time_transcription_with_http_info(account_id, call_id, transcription_id, opts)
      data
    end

    # Retrieve a specific transcription
    # Retrieve the specified transcription that was created on this call via [startTranscription](/docs/voice/bxml/startTranscription).
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param transcription_id [String] Programmable Voice API Transcription ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallTranscriptionResponse, Integer, Hash)>] CallTranscriptionResponse data, response status code and response headers
    def get_real_time_transcription_with_http_info(account_id, call_id, transcription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptionsApi.get_real_time_transcription ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TranscriptionsApi.get_real_time_transcription"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling TranscriptionsApi.get_real_time_transcription"
      end
      # verify the required parameter 'transcription_id' is set
      if @api_client.config.client_side_validation && transcription_id.nil?
        fail ArgumentError, "Missing the required parameter 'transcription_id' when calling TranscriptionsApi.get_real_time_transcription"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/calls/{callId}/transcriptions/{transcriptionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'transcriptionId' + '}', CGI.escape(transcription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CallTranscriptionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"TranscriptionsApi.get_real_time_transcription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionsApi#get_real_time_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enumerate transcriptions made with StartTranscription
    # Enumerates the transcriptions created on this call via [startTranscription](/docs/voice/bxml/startTranscription).
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<CallTranscriptionMetadata>]
    def list_real_time_transcriptions(account_id, call_id, opts = {})
      data, _status_code, _headers = list_real_time_transcriptions_with_http_info(account_id, call_id, opts)
      data
    end

    # Enumerate transcriptions made with StartTranscription
    # Enumerates the transcriptions created on this call via [startTranscription](/docs/voice/bxml/startTranscription).
    # @param account_id [String] Your Bandwidth Account ID.
    # @param call_id [String] Programmable Voice API Call ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CallTranscriptionMetadata>, Integer, Hash)>] Array<CallTranscriptionMetadata> data, response status code and response headers
    def list_real_time_transcriptions_with_http_info(account_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptionsApi.list_real_time_transcriptions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TranscriptionsApi.list_real_time_transcriptions"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling TranscriptionsApi.list_real_time_transcriptions"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/calls/{callId}/transcriptions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CallTranscriptionMetadata>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"TranscriptionsApi.list_real_time_transcriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionsApi#list_real_time_transcriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
