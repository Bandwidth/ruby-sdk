=begin
#Bandwidth

#Bandwidth's Communication APIs

The version of the OpenAPI document: 1.0.0
Contact: letstalk@bandwidth.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Bandwidth
  class SessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Participant to Session
    # Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Subscriptions] :subscriptions The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. --- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created
    # @return [nil]
    def add_participant_to_session(account_id, session_id, participant_id, opts = {})
      add_participant_to_session_with_http_info(account_id, session_id, participant_id, opts)
      nil
    end

    # Add Participant to Session
    # Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Subscriptions] :subscriptions The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. --- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_participant_to_session_with_http_info(account_id, session_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.add_participant_to_session ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.add_participant_to_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.add_participant_to_session"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SessionsApi.add_participant_to_session"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'subscriptions'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.add_participant_to_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#add_participant_to_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Session
    # Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Session] :session Create session request body.
    # @return [Session]
    def create_session(account_id, opts = {})
      data, _status_code, _headers = create_session_with_http_info(account_id, opts)
      data
    end

    # Create Session
    # Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Session] :session Create session request body.
    # @return [Array<(Session, Integer, Hash)>] Session data, response status code and response headers
    def create_session_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_session ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.create_session"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'session'])

      # return_type
      return_type = opts[:debug_return_type] || 'Session'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.create_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Session
    # Delete session by ID.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_session(account_id, session_id, opts = {})
      delete_session_with_http_info(account_id, session_id, opts)
      nil
    end

    # Delete Session
    # Delete session by ID.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_session_with_http_info(account_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_session ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.delete_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_session"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.delete_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Participant Subscriptions
    # Get a participant's subscriptions.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Subscriptions]
    def get_participant_subscriptions(account_id, session_id, participant_id, opts = {})
      data, _status_code, _headers = get_participant_subscriptions_with_http_info(account_id, session_id, participant_id, opts)
      data
    end

    # Get Participant Subscriptions
    # Get a participant&#39;s subscriptions.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscriptions, Integer, Hash)>] Subscriptions data, response status code and response headers
    def get_participant_subscriptions_with_http_info(account_id, session_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_participant_subscriptions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.get_participant_subscriptions"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_participant_subscriptions"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SessionsApi.get_participant_subscriptions"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Subscriptions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.get_participant_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_participant_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Session
    # Get session by ID.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [Session]
    def get_session(account_id, session_id, opts = {})
      data, _status_code, _headers = get_session_with_http_info(account_id, session_id, opts)
      data
    end

    # Get Session
    # Get session by ID.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Session, Integer, Hash)>] Session data, response status code and response headers
    def get_session_with_http_info(account_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_session ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.get_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_session"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Session'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.get_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Participants in Session
    # List participants in a session.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Participant>]
    def list_session_participants(account_id, session_id, opts = {})
      data, _status_code, _headers = list_session_participants_with_http_info(account_id, session_id, opts)
      data
    end

    # List Participants in Session
    # List participants in a session.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Participant>, Integer, Hash)>] Array<Participant> data, response status code and response headers
    def list_session_participants_with_http_info(account_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_session_participants ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.list_session_participants"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.list_session_participants"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}/participants'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Participant>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.list_session_participants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_session_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Participant from Session
    # Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_participant_from_session(account_id, session_id, participant_id, opts = {})
      remove_participant_from_session_with_http_info(account_id, session_id, participant_id, opts)
      nil
    end

    # Remove Participant from Session
    # Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_participant_from_session_with_http_info(account_id, session_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.remove_participant_from_session ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.remove_participant_from_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.remove_participant_from_session"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SessionsApi.remove_participant_from_session"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.remove_participant_from_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#remove_participant_from_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Participant Subscriptions
    # Update a participant's subscriptions. This is a full update that will replace the participant's subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call `getParticipantSubscriptions` if you need the current subscriptions. Calling this API with no `Subscriptions` object to remove all subscriptions.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Subscriptions] :subscriptions The body describes the desired subscriptions for the Participant. --- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created
    # @return [nil]
    def update_participant_subscriptions(account_id, session_id, participant_id, opts = {})
      update_participant_subscriptions_with_http_info(account_id, session_id, participant_id, opts)
      nil
    end

    # Update Participant Subscriptions
    # Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
    # @param account_id [String] Account ID
    # @param session_id [String] Session ID
    # @param participant_id [String] Participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Subscriptions] :subscriptions The body describes the desired subscriptions for the Participant. --- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_participant_subscriptions_with_http_info(account_id, session_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.update_participant_subscriptions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SessionsApi.update_participant_subscriptions"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.update_participant_subscriptions"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SessionsApi.update_participant_subscriptions"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'participantId' + '}', CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'subscriptions'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SessionsApi.update_participant_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#update_participant_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
