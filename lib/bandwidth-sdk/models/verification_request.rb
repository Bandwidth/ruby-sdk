=begin
#Bandwidth

#Bandwidth's Communication APIs

The version of the OpenAPI document: 1.0.0
Contact: letstalk@bandwidth.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Bandwidth
  class VerificationRequest
    attr_accessor :business_address

    attr_accessor :business_contact

    # Estimated monthly volume of messages from the toll-free number.
    attr_accessor :message_volume

    attr_accessor :phone_numbers

    # The category of the use case.
    attr_accessor :use_case

    # A general idea of the use case and customer.
    attr_accessor :use_case_summary

    # Example of message content.
    attr_accessor :production_message_content

    attr_accessor :opt_in_workflow

    # Any additional information.
    attr_accessor :additional_information

    # ISV name.
    attr_accessor :isv_reseller

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'business_address' => :'businessAddress',
        :'business_contact' => :'businessContact',
        :'message_volume' => :'messageVolume',
        :'phone_numbers' => :'phoneNumbers',
        :'use_case' => :'useCase',
        :'use_case_summary' => :'useCaseSummary',
        :'production_message_content' => :'productionMessageContent',
        :'opt_in_workflow' => :'optInWorkflow',
        :'additional_information' => :'additionalInformation',
        :'isv_reseller' => :'isvReseller'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'business_address' => :'Address',
        :'business_contact' => :'Contact',
        :'message_volume' => :'Integer',
        :'phone_numbers' => :'Array<String>',
        :'use_case' => :'String',
        :'use_case_summary' => :'String',
        :'production_message_content' => :'String',
        :'opt_in_workflow' => :'OptInWorkflow',
        :'additional_information' => :'String',
        :'isv_reseller' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'additional_information',
        :'isv_reseller'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, 'The input argument (attributes) must be a hash in `Bandwidth::VerificationRequest` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Bandwidth::VerificationRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'business_address')
        self.business_address = attributes[:'business_address']
      else
        self.business_address = nil
      end

      if attributes.key?(:'business_contact')
        self.business_contact = attributes[:'business_contact']
      else
        self.business_contact = nil
      end

      if attributes.key?(:'message_volume')
        self.message_volume = attributes[:'message_volume']
      else
        self.message_volume = nil
      end

      if attributes.key?(:'phone_numbers')
        if (value = attributes[:'phone_numbers']).is_a?(Array)
          self.phone_numbers = value
        end
      else
        self.phone_numbers = nil
      end

      if attributes.key?(:'use_case')
        self.use_case = attributes[:'use_case']
      else
        self.use_case = nil
      end

      if attributes.key?(:'use_case_summary')
        self.use_case_summary = attributes[:'use_case_summary']
      else
        self.use_case_summary = nil
      end

      if attributes.key?(:'production_message_content')
        self.production_message_content = attributes[:'production_message_content']
      else
        self.production_message_content = nil
      end

      if attributes.key?(:'opt_in_workflow')
        self.opt_in_workflow = attributes[:'opt_in_workflow']
      else
        self.opt_in_workflow = nil
      end

      if attributes.key?(:'additional_information')
        self.additional_information = attributes[:'additional_information']
      end

      if attributes.key?(:'isv_reseller')
        self.isv_reseller = attributes[:'isv_reseller']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @business_address.nil?
        invalid_properties.push('invalid value for "business_address", business_address cannot be nil.')
      end

      if @business_contact.nil?
        invalid_properties.push('invalid value for "business_contact", business_contact cannot be nil.')
      end

      if @message_volume.nil?
        invalid_properties.push('invalid value for "message_volume", message_volume cannot be nil.')
      end

      if @message_volume > 10000000
        invalid_properties.push('invalid value for "message_volume", must be smaller than or equal to 10000000.')
      end

      if @message_volume < 10
        invalid_properties.push('invalid value for "message_volume", must be greater than or equal to 10.')
      end

      if @phone_numbers.nil?
        invalid_properties.push('invalid value for "phone_numbers", phone_numbers cannot be nil.')
      end

      if @phone_numbers.length > 10
        invalid_properties.push('invalid value for "phone_numbers", number of items must be less than or equal to 10.')
      end

      if @phone_numbers.length < 1
        invalid_properties.push('invalid value for "phone_numbers", number of items must be greater than or equal to 1.')
      end

      if @use_case.nil?
        invalid_properties.push('invalid value for "use_case", use_case cannot be nil.')
      end

      if @use_case.to_s.length > 500
        invalid_properties.push('invalid value for "use_case", the character length must be smaller than or equal to 500.')
      end

      if @use_case.to_s.length < 0
        invalid_properties.push('invalid value for "use_case", the character length must be great than or equal to 0.')
      end

      if @use_case_summary.nil?
        invalid_properties.push('invalid value for "use_case_summary", use_case_summary cannot be nil.')
      end

      if @use_case_summary.to_s.length > 500
        invalid_properties.push('invalid value for "use_case_summary", the character length must be smaller than or equal to 500.')
      end

      if @use_case_summary.to_s.length < 1
        invalid_properties.push('invalid value for "use_case_summary", the character length must be great than or equal to 1.')
      end

      if @production_message_content.nil?
        invalid_properties.push('invalid value for "production_message_content", production_message_content cannot be nil.')
      end

      if @production_message_content.to_s.length > 500
        invalid_properties.push('invalid value for "production_message_content", the character length must be smaller than or equal to 500.')
      end

      if @production_message_content.to_s.length < 1
        invalid_properties.push('invalid value for "production_message_content", the character length must be great than or equal to 1.')
      end

      if @opt_in_workflow.nil?
        invalid_properties.push('invalid value for "opt_in_workflow", opt_in_workflow cannot be nil.')
      end

      if !@additional_information.nil? && @additional_information.to_s.length > 500
        invalid_properties.push('invalid value for "additional_information", the character length must be smaller than or equal to 500.')
      end

      if !@additional_information.nil? && @additional_information.to_s.length < 0
        invalid_properties.push('invalid value for "additional_information", the character length must be great than or equal to 0.')
      end

      if !@isv_reseller.nil? && @isv_reseller.to_s.length > 500
        invalid_properties.push('invalid value for "isv_reseller", the character length must be smaller than or equal to 500.')
      end

      if !@isv_reseller.nil? && @isv_reseller.to_s.length < 0
        invalid_properties.push('invalid value for "isv_reseller", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @business_address.nil?
      return false if @business_contact.nil?
      return false if @message_volume.nil?
      return false if @message_volume > 10000000
      return false if @message_volume < 10
      return false if @phone_numbers.nil?
      return false if @phone_numbers.length > 10
      return false if @phone_numbers.length < 1
      return false if @use_case.nil?
      return false if @use_case.to_s.length > 500
      return false if @use_case.to_s.length < 0
      return false if @use_case_summary.nil?
      return false if @use_case_summary.to_s.length > 500
      return false if @use_case_summary.to_s.length < 1
      return false if @production_message_content.nil?
      return false if @production_message_content.to_s.length > 500
      return false if @production_message_content.to_s.length < 1
      return false if @opt_in_workflow.nil?
      return false if !@additional_information.nil? && @additional_information.to_s.length > 500
      return false if !@additional_information.nil? && @additional_information.to_s.length < 0
      return false if !@isv_reseller.nil? && @isv_reseller.to_s.length > 500
      return false if !@isv_reseller.nil? && @isv_reseller.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] message_volume Value to be assigned
    def message_volume=(message_volume)
      if message_volume.nil?
        fail ArgumentError, 'message_volume cannot be nil'
      end

      if message_volume > 10000000
        fail ArgumentError, 'invalid value for "message_volume", must be smaller than or equal to 10000000.'
      end

      if message_volume < 10
        fail ArgumentError, 'invalid value for "message_volume", must be greater than or equal to 10.'
      end

      @message_volume = message_volume
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_numbers Value to be assigned
    def phone_numbers=(phone_numbers)
      if phone_numbers.nil?
        fail ArgumentError, 'phone_numbers cannot be nil'
      end

      if phone_numbers.length > 10
        fail ArgumentError, 'invalid value for "phone_numbers", number of items must be less than or equal to 10.'
      end

      if phone_numbers.length < 1
        fail ArgumentError, 'invalid value for "phone_numbers", number of items must be greater than or equal to 1.'
      end

      @phone_numbers = phone_numbers
    end

    # Custom attribute writer method with validation
    # @param [Object] use_case Value to be assigned
    def use_case=(use_case)
      if use_case.nil?
        fail ArgumentError, 'use_case cannot be nil'
      end

      if use_case.to_s.length > 500
        fail ArgumentError, 'invalid value for "use_case", the character length must be smaller than or equal to 500.'
      end

      if use_case.to_s.length < 0
        fail ArgumentError, 'invalid value for "use_case", the character length must be great than or equal to 0.'
      end

      @use_case = use_case
    end

    # Custom attribute writer method with validation
    # @param [Object] use_case_summary Value to be assigned
    def use_case_summary=(use_case_summary)
      if use_case_summary.nil?
        fail ArgumentError, 'use_case_summary cannot be nil'
      end

      if use_case_summary.to_s.length > 500
        fail ArgumentError, 'invalid value for "use_case_summary", the character length must be smaller than or equal to 500.'
      end

      if use_case_summary.to_s.length < 1
        fail ArgumentError, 'invalid value for "use_case_summary", the character length must be great than or equal to 1.'
      end

      @use_case_summary = use_case_summary
    end

    # Custom attribute writer method with validation
    # @param [Object] production_message_content Value to be assigned
    def production_message_content=(production_message_content)
      if production_message_content.nil?
        fail ArgumentError, 'production_message_content cannot be nil'
      end

      if production_message_content.to_s.length > 500
        fail ArgumentError, 'invalid value for "production_message_content", the character length must be smaller than or equal to 500.'
      end

      if production_message_content.to_s.length < 1
        fail ArgumentError, 'invalid value for "production_message_content", the character length must be great than or equal to 1.'
      end

      @production_message_content = production_message_content
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_information Value to be assigned
    def additional_information=(additional_information)
      if !additional_information.nil? && additional_information.to_s.length > 500
        fail ArgumentError, 'invalid value for "additional_information", the character length must be smaller than or equal to 500.'
      end

      if !additional_information.nil? && additional_information.to_s.length < 0
        fail ArgumentError, 'invalid value for "additional_information", the character length must be great than or equal to 0.'
      end

      @additional_information = additional_information
    end

    # Custom attribute writer method with validation
    # @param [Object] isv_reseller Value to be assigned
    def isv_reseller=(isv_reseller)
      if !isv_reseller.nil? && isv_reseller.to_s.length > 500
        fail ArgumentError, 'invalid value for "isv_reseller", the character length must be smaller than or equal to 500.'
      end

      if !isv_reseller.nil? && isv_reseller.to_s.length < 0
        fail ArgumentError, 'invalid value for "isv_reseller", the character length must be great than or equal to 0.'
      end

      @isv_reseller = isv_reseller
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          business_address == o.business_address &&
          business_contact == o.business_contact &&
          message_volume == o.message_volume &&
          phone_numbers == o.phone_numbers &&
          use_case == o.use_case &&
          use_case_summary == o.use_case_summary &&
          production_message_content == o.production_message_content &&
          opt_in_workflow == o.opt_in_workflow &&
          additional_information == o.additional_information &&
          isv_reseller == o.isv_reseller
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [business_address, business_contact, message_volume, phone_numbers, use_case, use_case_summary, production_message_content, opt_in_workflow, additional_information, isv_reseller].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Bandwidth.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
