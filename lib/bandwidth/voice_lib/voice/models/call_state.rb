# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # CallState Model.
  class CallState < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :parent_call_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :application_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :from

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :direction

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [String]
    attr_accessor :state

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [String]
    attr_accessor :identity

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [Hash]
    attr_accessor :stir_shaken

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [DateTime]
    attr_accessor :start_time

    # @return [DateTime]
    attr_accessor :enqueued_time

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [DateTime]
    attr_accessor :answer_time

    # The current state of the call. Current possible values are 'initiated',
    # 'answered' and 'disconnected'. Additional states may be added in the
    # future, so your application must be tolerant of unknown values.
    # @return [DateTime]
    attr_accessor :end_time

    # The reason the call was disconnected, or null if the call is still active.
    # Current values are 'cancel', 'timeout', 'busy', 'rejected', 'hangup',
    # 'invalid-bxml', 'callback-error', 'application-error', 'error',
    # 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes
    # may be added in the future, so your application must be tolerant of
    # unknown values.
    # @return [String]
    attr_accessor :disconnect_cause

    # The reason the call was disconnected, or null if the call is still active.
    # Current values are 'cancel', 'timeout', 'busy', 'rejected', 'hangup',
    # 'invalid-bxml', 'callback-error', 'application-error', 'error',
    # 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes
    # may be added in the future, so your application must be tolerant of
    # unknown values.
    # @return [String]
    attr_accessor :error_message

    # The reason the call was disconnected, or null if the call is still active.
    # Current values are 'cancel', 'timeout', 'busy', 'rejected', 'hangup',
    # 'invalid-bxml', 'callback-error', 'application-error', 'error',
    # 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes
    # may be added in the future, so your application must be tolerant of
    # unknown values.
    # @return [String]
    attr_accessor :error_id

    # The reason the call was disconnected, or null if the call is still active.
    # Current values are 'cancel', 'timeout', 'busy', 'rejected', 'hangup',
    # 'invalid-bxml', 'callback-error', 'application-error', 'error',
    # 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes
    # may be added in the future, so your application must be tolerant of
    # unknown values.
    # @return [DateTime]
    attr_accessor :last_update

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['call_id'] = 'callId'
      @_hash['parent_call_id'] = 'parentCallId'
      @_hash['application_id'] = 'applicationId'
      @_hash['account_id'] = 'accountId'
      @_hash['to'] = 'to'
      @_hash['from'] = 'from'
      @_hash['direction'] = 'direction'
      @_hash['state'] = 'state'
      @_hash['identity'] = 'identity'
      @_hash['stir_shaken'] = 'stirShaken'
      @_hash['start_time'] = 'startTime'
      @_hash['enqueued_time'] = 'enqueuedTime'
      @_hash['answer_time'] = 'answerTime'
      @_hash['end_time'] = 'endTime'
      @_hash['disconnect_cause'] = 'disconnectCause'
      @_hash['error_message'] = 'errorMessage'
      @_hash['error_id'] = 'errorId'
      @_hash['last_update'] = 'lastUpdate'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        call_id
        parent_call_id
        application_id
        account_id
        to
        from
        direction
        state
        identity
        stir_shaken
        start_time
        enqueued_time
        answer_time
        end_time
        disconnect_cause
        error_message
        error_id
        last_update
      ]
    end

    # An array for nullable fields
    def nullables
      %w[
        parent_call_id
        identity
        answer_time
        end_time
        disconnect_cause
        error_message
        error_id
      ]
    end

    def initialize(call_id = nil,
                   parent_call_id = nil,
                   application_id = nil,
                   account_id = nil,
                   to = nil,
                   from = nil,
                   direction = nil,
                   state = nil,
                   identity = nil,
                   stir_shaken = nil,
                   start_time = nil,
                   enqueued_time = nil,
                   answer_time = nil,
                   end_time = nil,
                   disconnect_cause = nil,
                   error_message = nil,
                   error_id = nil,
                   last_update = nil)
      @call_id = call_id unless call_id == SKIP
      @parent_call_id = parent_call_id unless parent_call_id == SKIP
      @application_id = application_id unless application_id == SKIP
      @account_id = account_id unless account_id == SKIP
      @to = to unless to == SKIP
      @from = from unless from == SKIP
      @direction = direction unless direction == SKIP
      @state = state unless state == SKIP
      @identity = identity unless identity == SKIP
      @stir_shaken = stir_shaken unless stir_shaken == SKIP
      @start_time = start_time unless start_time == SKIP
      @enqueued_time = enqueued_time unless enqueued_time == SKIP
      @answer_time = answer_time unless answer_time == SKIP
      @end_time = end_time unless end_time == SKIP
      @disconnect_cause = disconnect_cause unless disconnect_cause == SKIP
      @error_message = error_message unless error_message == SKIP
      @error_id = error_id unless error_id == SKIP
      @last_update = last_update unless last_update == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      call_id = hash.key?('callId') ? hash['callId'] : SKIP
      parent_call_id = hash.key?('parentCallId') ? hash['parentCallId'] : SKIP
      application_id = hash.key?('applicationId') ? hash['applicationId'] : SKIP
      account_id = hash.key?('accountId') ? hash['accountId'] : SKIP
      to = hash.key?('to') ? hash['to'] : SKIP
      from = hash.key?('from') ? hash['from'] : SKIP
      direction = hash.key?('direction') ? hash['direction'] : SKIP
      state = hash.key?('state') ? hash['state'] : SKIP
      identity = hash.key?('identity') ? hash['identity'] : SKIP
      stir_shaken = hash.key?('stirShaken') ? hash['stirShaken'] : SKIP
      start_time = if hash.key?('startTime')
                      (DateTimeHelper.from_rfc3339(hash['startTime']) if hash['startTime'])
                   else
                     SKIP
                   end
      enqueued_time = if hash.key?('enqueuedTime')
                        (DateTimeHelper.from_rfc3339(hash['enqueuedTime']) if hash['enqueuedTime'])
                      else
                        SKIP
                      end
      answer_time = if hash.key?('answerTime')
                      (DateTimeHelper.from_rfc3339(hash['answerTime']) if hash['answerTime'])
                    else
                      SKIP
                    end
      end_time = if hash.key?('endTime')
                    (DateTimeHelper.from_rfc3339(hash['endTime']) if hash['endTime'])
                 else
                   SKIP
                 end
      disconnect_cause =
        hash.key?('disconnectCause') ? hash['disconnectCause'] : SKIP
      error_message = hash.key?('errorMessage') ? hash['errorMessage'] : SKIP
      error_id = hash.key?('errorId') ? hash['errorId'] : SKIP
      last_update = if hash.key?('lastUpdate')
                      (DateTimeHelper.from_rfc3339(hash['lastUpdate']) if hash['lastUpdate'])
                    else
                      SKIP
                    end

      # Create object from extracted values.
      CallState.new(call_id,
                    parent_call_id,
                    application_id,
                    account_id,
                    to,
                    from,
                    direction,
                    state,
                    identity,
                    stir_shaken,
                    start_time,
                    enqueued_time,
                    answer_time,
                    end_time,
                    disconnect_cause,
                    error_message,
                    error_id,
                    last_update)
    end

    def to_start_time
      DateTimeHelper.to_rfc3339(start_time)
    end

    def to_enqueued_time
      DateTimeHelper.to_rfc3339(enqueued_time)
    end

    def to_answer_time
      DateTimeHelper.to_rfc3339(answer_time)
    end

    def to_end_time
      DateTimeHelper.to_rfc3339(end_time)
    end

    def to_last_update
      DateTimeHelper.to_rfc3339(last_update)
    end
  end
end
