# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # This object represents all possible fields that may be included in callbacks
  # related to call events, including events that come from BXML verbs
  class CallCallback < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :application_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :from

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :direction

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :start_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :answer_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :transfer_caller_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :transfer_to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cause

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :error_message

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :error_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :digit

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :parent_call_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :recording_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :duration

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :media_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :channels

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :digits

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :terminating_digit

    # TODO: Write general description for this method
    # @return [Transcription]
    attr_accessor :transcription

    # TODO: Write general description for this method
    # @return [Diversion]
    attr_accessor :diversion

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['event_type'] = 'eventType'
      @_hash['event_time'] = 'eventTime'
      @_hash['account_id'] = 'accountId'
      @_hash['application_id'] = 'applicationId'
      @_hash['from'] = 'from'
      @_hash['to'] = 'to'
      @_hash['direction'] = 'direction'
      @_hash['call_id'] = 'callId'
      @_hash['call_url'] = 'callUrl'
      @_hash['start_time'] = 'startTime'
      @_hash['answer_time'] = 'answerTime'
      @_hash['transfer_caller_id'] = 'transferCallerId'
      @_hash['transfer_to'] = 'transferTo'
      @_hash['cause'] = 'cause'
      @_hash['error_message'] = 'errorMessage'
      @_hash['error_id'] = 'errorId'
      @_hash['end_time'] = 'endTime'
      @_hash['digit'] = 'digit'
      @_hash['parent_call_id'] = 'parentCallId'
      @_hash['recording_id'] = 'recordingId'
      @_hash['duration'] = 'duration'
      @_hash['file_format'] = 'fileFormat'
      @_hash['media_url'] = 'mediaUrl'
      @_hash['tag'] = 'tag'
      @_hash['channels'] = 'channels'
      @_hash['status'] = 'status'
      @_hash['digits'] = 'digits'
      @_hash['terminating_digit'] = 'terminatingDigit'
      @_hash['transcription'] = 'transcription'
      @_hash['diversion'] = 'diversion'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        event_type
        event_time
        account_id
        application_id
        from
        to
        direction
        call_id
        call_url
        start_time
        answer_time
        transfer_caller_id
        transfer_to
        cause
        error_message
        error_id
        end_time
        digit
        parent_call_id
        recording_id
        duration
        file_format
        media_url
        tag
        channels
        status
        digits
        terminating_digit
        transcription
        diversion
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(event_type = nil,
                   event_time = nil,
                   account_id = nil,
                   application_id = nil,
                   from = nil,
                   to = nil,
                   direction = nil,
                   call_id = nil,
                   call_url = nil,
                   start_time = nil,
                   answer_time = nil,
                   transfer_caller_id = nil,
                   transfer_to = nil,
                   cause = nil,
                   error_message = nil,
                   error_id = nil,
                   end_time = nil,
                   digit = nil,
                   parent_call_id = nil,
                   recording_id = nil,
                   duration = nil,
                   file_format = nil,
                   media_url = nil,
                   tag = nil,
                   channels = nil,
                   status = nil,
                   digits = nil,
                   terminating_digit = nil,
                   transcription = nil,
                   diversion = nil)
      @event_type = event_type unless event_type == SKIP
      @event_time = event_time unless event_time == SKIP
      @account_id = account_id unless account_id == SKIP
      @application_id = application_id unless application_id == SKIP
      @from = from unless from == SKIP
      @to = to unless to == SKIP
      @direction = direction unless direction == SKIP
      @call_id = call_id unless call_id == SKIP
      @call_url = call_url unless call_url == SKIP
      @start_time = start_time unless start_time == SKIP
      @answer_time = answer_time unless answer_time == SKIP
      @transfer_caller_id = transfer_caller_id unless transfer_caller_id == SKIP
      @transfer_to = transfer_to unless transfer_to == SKIP
      @cause = cause unless cause == SKIP
      @error_message = error_message unless error_message == SKIP
      @error_id = error_id unless error_id == SKIP
      @end_time = end_time unless end_time == SKIP
      @digit = digit unless digit == SKIP
      @parent_call_id = parent_call_id unless parent_call_id == SKIP
      @recording_id = recording_id unless recording_id == SKIP
      @duration = duration unless duration == SKIP
      @file_format = file_format unless file_format == SKIP
      @media_url = media_url unless media_url == SKIP
      @tag = tag unless tag == SKIP
      @channels = channels unless channels == SKIP
      @status = status unless status == SKIP
      @digits = digits unless digits == SKIP
      @terminating_digit = terminating_digit unless terminating_digit == SKIP
      @transcription = transcription unless transcription == SKIP
      @diversion = diversion unless diversion == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      event_type = hash.key?('eventType') ? hash['eventType'] : SKIP
      event_time = hash.key?('eventTime') ? hash['eventTime'] : SKIP
      account_id = hash.key?('accountId') ? hash['accountId'] : SKIP
      application_id = hash.key?('applicationId') ? hash['applicationId'] : SKIP
      from = hash.key?('from') ? hash['from'] : SKIP
      to = hash.key?('to') ? hash['to'] : SKIP
      direction = hash.key?('direction') ? hash['direction'] : SKIP
      call_id = hash.key?('callId') ? hash['callId'] : SKIP
      call_url = hash.key?('callUrl') ? hash['callUrl'] : SKIP
      start_time = hash.key?('startTime') ? hash['startTime'] : SKIP
      answer_time = hash.key?('answerTime') ? hash['answerTime'] : SKIP
      transfer_caller_id =
        hash.key?('transferCallerId') ? hash['transferCallerId'] : SKIP
      transfer_to = hash.key?('transferTo') ? hash['transferTo'] : SKIP
      cause = hash.key?('cause') ? hash['cause'] : SKIP
      error_message = hash.key?('errorMessage') ? hash['errorMessage'] : SKIP
      error_id = hash.key?('errorId') ? hash['errorId'] : SKIP
      end_time = hash.key?('endTime') ? hash['endTime'] : SKIP
      digit = hash.key?('digit') ? hash['digit'] : SKIP
      parent_call_id = hash.key?('parentCallId') ? hash['parentCallId'] : SKIP
      recording_id = hash.key?('recordingId') ? hash['recordingId'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP
      file_format = hash.key?('fileFormat') ? hash['fileFormat'] : SKIP
      media_url = hash.key?('mediaUrl') ? hash['mediaUrl'] : SKIP
      tag = hash.key?('tag') ? hash['tag'] : SKIP
      channels = hash.key?('channels') ? hash['channels'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      digits = hash.key?('digits') ? hash['digits'] : SKIP
      terminating_digit =
        hash.key?('terminatingDigit') ? hash['terminatingDigit'] : SKIP
      transcription = Transcription.from_hash(hash['transcription']) if hash['transcription']
      diversion = Diversion.from_hash(hash['diversion']) if hash['diversion']

      # Create object from extracted values.
      CallCallback.new(event_type,
                       event_time,
                       account_id,
                       application_id,
                       from,
                       to,
                       direction,
                       call_id,
                       call_url,
                       start_time,
                       answer_time,
                       transfer_caller_id,
                       transfer_to,
                       cause,
                       error_message,
                       error_id,
                       end_time,
                       digit,
                       parent_call_id,
                       recording_id,
                       duration,
                       file_format,
                       media_url,
                       tag,
                       channels,
                       status,
                       digits,
                       terminating_digit,
                       transcription,
                       diversion)
    end
  end
end
