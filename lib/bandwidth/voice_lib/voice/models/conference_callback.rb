# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # This object represents all possible fields that may be included in callbacks
  # related to conference events
  class ConferenceCallback < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :conference_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :from

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :recording_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :channels

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :start_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :duration

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :media_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['conference_id'] = 'conferenceId'
      @_hash['name'] = 'name'
      @_hash['event_type'] = 'eventType'
      @_hash['event_time'] = 'eventTime'
      @_hash['tag'] = 'tag'
      @_hash['call_id'] = 'callId'
      @_hash['to'] = 'to'
      @_hash['from'] = 'from'
      @_hash['account_id'] = 'accountId'
      @_hash['recording_id'] = 'recordingId'
      @_hash['channels'] = 'channels'
      @_hash['start_time'] = 'startTime'
      @_hash['end_time'] = 'endTime'
      @_hash['duration'] = 'duration'
      @_hash['file_format'] = 'fileFormat'
      @_hash['media_url'] = 'mediaUrl'
      @_hash['status'] = 'status'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        conference_id
        name
        event_type
        event_time
        tag
        call_id
        to
        from
        account_id
        recording_id
        channels
        start_time
        end_time
        duration
        file_format
        media_url
        status
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(conference_id = nil,
                   name = nil,
                   event_type = nil,
                   event_time = nil,
                   tag = nil,
                   call_id = nil,
                   to = nil,
                   from = nil,
                   account_id = nil,
                   recording_id = nil,
                   channels = nil,
                   start_time = nil,
                   end_time = nil,
                   duration = nil,
                   file_format = nil,
                   media_url = nil,
                   status = nil)
      @conference_id = conference_id unless conference_id == SKIP
      @name = name unless name == SKIP
      @event_type = event_type unless event_type == SKIP
      @event_time = event_time unless event_time == SKIP
      @tag = tag unless tag == SKIP
      @call_id = call_id unless call_id == SKIP
      @to = to unless to == SKIP
      @from = from unless from == SKIP
      @account_id = account_id unless account_id == SKIP
      @recording_id = recording_id unless recording_id == SKIP
      @channels = channels unless channels == SKIP
      @start_time = start_time unless start_time == SKIP
      @end_time = end_time unless end_time == SKIP
      @duration = duration unless duration == SKIP
      @file_format = file_format unless file_format == SKIP
      @media_url = media_url unless media_url == SKIP
      @status = status unless status == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      conference_id = hash.key?('conferenceId') ? hash['conferenceId'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      event_type = hash.key?('eventType') ? hash['eventType'] : SKIP
      event_time = hash.key?('eventTime') ? hash['eventTime'] : SKIP
      tag = hash.key?('tag') ? hash['tag'] : SKIP
      call_id = hash.key?('callId') ? hash['callId'] : SKIP
      to = hash.key?('to') ? hash['to'] : SKIP
      from = hash.key?('from') ? hash['from'] : SKIP
      account_id = hash.key?('accountId') ? hash['accountId'] : SKIP
      recording_id = hash.key?('recordingId') ? hash['recordingId'] : SKIP
      channels = hash.key?('channels') ? hash['channels'] : SKIP
      start_time = hash.key?('startTime') ? hash['startTime'] : SKIP
      end_time = hash.key?('endTime') ? hash['endTime'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP
      file_format = hash.key?('fileFormat') ? hash['fileFormat'] : SKIP
      media_url = hash.key?('mediaUrl') ? hash['mediaUrl'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP

      # Create object from extracted values.
      ConferenceCallback.new(conference_id,
                             name,
                             event_type,
                             event_time,
                             tag,
                             call_id,
                             to,
                             from,
                             account_id,
                             recording_id,
                             channels,
                             start_time,
                             end_time,
                             duration,
                             file_format,
                             media_url,
                             status)
    end
  end
end
