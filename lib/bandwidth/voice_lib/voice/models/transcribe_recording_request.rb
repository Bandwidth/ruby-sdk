# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TranscribeRecordingRequest Model.
  class TranscribeRecordingRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_url

    # TODO: Write general description for this method
    # @return [CallbackMethodEnum]
    attr_accessor :callback_method

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :username

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :callback_timeout

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :detect_language

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['callback_url'] = 'callbackUrl'
      @_hash['callback_method'] = 'callbackMethod'
      @_hash['username'] = 'username'
      @_hash['password'] = 'password'
      @_hash['tag'] = 'tag'
      @_hash['callback_timeout'] = 'callbackTimeout'
      @_hash['detect_language'] = 'detectLanguage'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        callback_url
        callback_method
        username
        password
        tag
        callback_timeout
        detect_language
      ]
    end

    # An array for nullable fields
    def nullables
      %w[
        callback_method
        username
        password
        tag
        callback_timeout
        detect_language
      ]
    end

    def initialize(callback_url = nil,
                   callback_method = nil,
                   username = nil,
                   password = nil,
                   tag = nil,
                   detect_language = nil,
                   callback_timeout = nil)
      @callback_url = callback_url unless callback_url == SKIP
      @callback_method = callback_method unless callback_method == SKIP
      @username = username unless username == SKIP
      @password = password unless password == SKIP
      @tag = tag unless tag == SKIP
      @callback_timeout = callback_timeout unless callback_timeout == SKIP
      @detect_language = detect_language unless detect_language == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      callback_url = hash.key?('callbackUrl') ? hash['callbackUrl'] : SKIP
      callback_method =
        hash.key?('callbackMethod') ? hash['callbackMethod'] : SKIP
      username = hash.key?('username') ? hash['username'] : SKIP
      password = hash.key?('password') ? hash['password'] : SKIP
      tag = hash.key?('tag') ? hash['tag'] : SKIP
      callback_timeout =
        hash.key?('callbackTimeout') ? hash['callbackTimeout'] : SKIP
      detect_language =
        hash.key?('detectLanguage') ? hash['detectLanguage'] : SKIP

      # Create object from extracted values.
      TranscribeRecordingRequest.new(callback_url,
                                     callback_method,
                                     username,
                                     password,
                                     tag,
                                     detect_language,
                                     callback_timeout)
    end
  end
end
