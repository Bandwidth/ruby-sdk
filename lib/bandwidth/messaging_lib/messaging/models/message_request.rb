# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # MessageRequest Model.
  class MessageRequest < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :application_id

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :from

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :text

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :media

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['application_id'] = 'applicationId'
      @_hash['to'] = 'to'
      @_hash['from'] = 'from'
      @_hash['text'] = 'text'
      @_hash['media'] = 'media'
      @_hash['tag'] = 'tag'
      @_hash
    end

    def initialize(application_id = nil,
                   to = nil,
                   from = nil,
                   text = nil,
                   media = nil,
                   tag = nil)
      @application_id = application_id
      @to = to
      @from = from
      @text = text
      @media = media
      @tag = tag
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      application_id = hash['applicationId']
      to = hash['to']
      from = hash['from']
      text = hash['text']
      media = hash['media']
      tag = hash['tag']

      # Create object from extracted values.
      MessageRequest.new(application_id,
                         to,
                         from,
                         text,
                         media,
                         tag)
    end
  end
end
