# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TwoFactorVerifyRequestSchema Model.
  class TwoFactorVerifyRequestSchema < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The phone number to send the 2fa code to.
    # @return [String]
    attr_accessor :to

    # The application unique ID, obtained from Bandwidth.
    # @return [String]
    attr_accessor :application_id

    # An optional field to denote what scope or action the 2fa code is
    # addressing.  If not supplied, defaults to "2FA".
    # @return [String]
    attr_accessor :scope

    # The time period, in minutes, to validate the 2fa code.  By setting this to
    # 3 minutes, it will mean any code generated within the last 3 minutes are
    # still valid.  The valid range for expiration time is between 0 and 15
    # minutes, exclusively and inclusively, respectively.
    # @return [Float]
    attr_accessor :expiration_time_in_minutes

    # The generated 2fa code to check if valid
    # @return [String]
    attr_accessor :code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['to'] = 'to'
      @_hash['application_id'] = 'applicationId'
      @_hash['scope'] = 'scope'
      @_hash['expiration_time_in_minutes'] = 'expirationTimeInMinutes'
      @_hash['code'] = 'code'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        scope
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(to = nil,
                   application_id = nil,
                   expiration_time_in_minutes = nil,
                   code = nil,
                   scope = nil)
      @to = to unless to == SKIP
      @application_id = application_id unless application_id == SKIP
      @scope = scope unless scope == SKIP
      unless expiration_time_in_minutes == SKIP
        @expiration_time_in_minutes =
          expiration_time_in_minutes
      end
      @code = code unless code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      to = hash.key?('to') ? hash['to'] : SKIP
      application_id = hash.key?('applicationId') ? hash['applicationId'] : SKIP
      expiration_time_in_minutes =
        hash.key?('expirationTimeInMinutes') ? hash['expirationTimeInMinutes'] : SKIP
      code = hash.key?('code') ? hash['code'] : SKIP
      scope = hash.key?('scope') ? hash['scope'] : SKIP

      # Create object from extracted values.
      TwoFactorVerifyRequestSchema.new(to,
                                       application_id,
                                       expiration_time_in_minutes,
                                       code,
                                       scope)
    end
  end
end
